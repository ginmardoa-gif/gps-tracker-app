#version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: gps_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./database:/var/lib/postgresql/data
    networks:
      - gps-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gps_backend
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
      FLASK_ENV: ${FLASK_ENV}
      CORS_ORIGINS: ${CORS_ORIGINS}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - gps-network
    restart: unless-stopped
    ports:
      - "127.0.0.1:5000:5000"
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:5000/api/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: gps_frontend
    environment:
      - VITE_API_URL=https://gps.praxisnetworking.com/api
    depends_on:
      - backend
    networks:
      - gps-network
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:80"

  mobile:
    image: nginx:alpine
    container_name: gps_mobile
    volumes:
      - ./mobile:/usr/share/nginx/html:ro
    networks:
      - gps-network
    restart: unless-stopped
    ports:
      - "127.0.0.1:8080:80"

networks:
  gps-network:
    driver: bridge
